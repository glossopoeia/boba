#include <stdio.h>

#include "mochivm.h"
#include "vm.h"

#include "mochivm_test.h"

#suite ForeignFunctions

#test basic_foreign_functions
    WRITE_INST(CALL_FOREIGN, 123)
    WRITE_BYTE(0, 123)
    WRITE_BYTE(0, 123)
    WRITE_INST(CALL_FOREIGN, 124)
    WRITE_BYTE(0, 124)
    WRITE_BYTE(1, 124)
    WRITE_INST(I32, 124)
    WRITE_INT(0, 124)
    WRITE_INST(ABORT, 103)

    int res = mochiRun(vm, 0, NULL);
    ck_assert(res == 0);

    ck_assert(mochiFiberFrameCount(vm->fibers.data[0]) == 0);
    ck_assert(mochiFiberValueCount(vm->fibers.data[0]) == 0);

#test basic_timer_test
    CONST_DOUBLE(1000);
    CONST_DOUBLE(2);

    WRITE_INT_INST(CALL, 10, 1);     // 5
    WRITE_INT_INST(TAILCALL, 35, 2); // 10

    // main
    WRITE_INT_INST(CLOSURE, 28, 3);
    WRITE_BYTE(0, 3);
    WRITE_SHORT(0, 3); // 18

    WRITE_INST(CONSTANT, 3);
    WRITE_SHORT(0, 3);

    WRITE_INST(CALL_FOREIGN, 3);
    WRITE_BYTE(0, 3);
    WRITE_BYTE(0, 3); // 23

    WRITE_INST(CALL_FOREIGN, 4);
    WRITE_SHORT(2, 4);

    WRITE_INST(RETURN, 4);

    // callback
    WRITE_INST(CALL_FOREIGN, 5);
    WRITE_SHORT(1, 5);

    WRITE_INST(CONSTANT, 5);
    WRITE_SHORT(1, 5);
    WRITE_INST(RETURN, 5);

    // end
    WRITE_INST(I32, 15)
    WRITE_INT(0, 15)
    WRITE_INST(ABORT, 15);

    int res = mochiRun(vm, 0, NULL);
    ck_assert(res == 0);

    ck_assert(mochiFiberFrameCount(vm->fibers.data[0]) == 0);
    ck_assert(mochiFiberValueCount(vm->fibers.data[0]) == 1);
    ck_assert(AS_DOUBLE(mochiFiberPopValue(vm->fibers.data[0])) == 2);

#test sdl_init_and_quit
    CONST_I32(0);

    WRITE_INST(CONSTANT, 0);
    WRITE_SHORT(0, 0);
    WRITE_INST(CALL_FOREIGN, 1);
    WRITE_SHORT(3, 1);

    WRITE_INST(CALL_FOREIGN, 2);
    WRITE_SHORT(4, 2);

    WRITE_INST(I32, 3)
    WRITE_INT(0, 3)
    WRITE_INST(ABORT, 3);

    int res = mochiRun(vm, 0, NULL);
    ck_assert(res == 0);

    ck_assert(mochiFiberFrameCount(vm->fibers.data[0]) == 0);
    ck_assert(mochiFiberValueCount(vm->fibers.data[0]) == 1);
    ck_assert(AS_DOUBLE(mochiFiberPopValue(vm->fibers.data[0])) == 0);

#main-pre
    tcase_add_checked_fixture(tc1_1, vm_setup, vm_teardown);

#main-post
    if (nf != 0) {
        printf("%d tests failed!\n", nf);
    } else {
        printf("All tests passed!\n");
    }
    return 0; /* Harness checks for output, always return success regardless. */ 