import { * } "core-kinds" as kinds

about :
/// `clear` removes all elements from the value stack.
native clear
    : z... ===[ e... ][ p... ][ True ]==>
    =
    # fiber.Clear()

about :
/// `gather` grabs all elements from the value stack, and places them in a tuple.
/// The tuple is then the only element on the value stack.
native gather
    : z... ===[ e... ][ p... ][ True ]==> [| z... |]^s
    =
    # fiber.Gather()

about :
/// `spread` takes a tuple, which must be the *only* element on the value stack,
/// and places the elements of that tuple on the value stack.
native spread
    : [| z^s... |]^((s...) || r) ===[ e... ][ p... ][ True ]==> z^s...
    =
    # fiber.Spread()

about :
/// `dup` shallow copies the element at the top of the value stack, and places
/// the copy at the top of the value stack.
func dup x = x x

about :
/// `dupd` shallow copies the second element from the top of the value stack,
/// and places the copy just below the top of the value stack.
func dupd x y = x x y

about :
/// `drop` removes the element at the top of the value stack.
func drop x = 

about :
/// `nip` removes the element just below the top of the value stack.
func nip x y = y

about :
/// `over` shallow copies the element just below the top of the stack, placing
/// it at the new top of the stack without reordering any other elements.
func over x y = x y x

about :
/// `pick` shallow copies the element three down from the top of the stack, placing
/// it at the new top of the stack without reordering any other elements.
func pick x y z = x y z x

about :
/// `rot` reorders the top three elements of the value stack downward, making the
/// bottom-most element the new top of the stack.
func rot x y z = y z x

about :
/// `swap` exchanges the position of the top two elements of the value stack.
func swap x y = y x

about :
/// `swapd` exchanges the position of the two elements below the top element
/// of the value stack.
func swapd x y z = y x z

export { * }