import { * } "core-kinds" as kinds
import { * } "core-ref" as ref

data Nursery (h : Heap)
data CancelToken

native spawn
    : z... (| ===[ e... ][ p... ][ t ]==> |)^s (Nursery h)^r ===[ e... ][ p... ][ t ]==> z...
    =
    # nursery := fiber.PopOneValue().(runtime.Nursery)
    # closure := fiber.PopOneValue().(runtime.Closure)
    #
    # child := runtime.NewFiber(fiber, fiber.Context)
    # child.SetupClosureCallStored(closure, []runtime.Value{}, nil)
    # child.Instruction = closure.CodeStart
    # nursery.Waiter.Add(1)
    # go machine.RunSub(child, nursery.Waiter)

native cancel
    : z... CancelToken^r ===[ e... ][ p... ][ True ]==> z...
    =
    # token := fiber.PopOneValue().(runtime.CancelToken)
    # token.Cancel()

native check-cancel
    : z... ===[ e... ][ p... ][ True ]==> z...
    =
    # if fiber.LastCancelContext().Ctx.Err() != nil {
    #     fiber.Cancelled = true
    # }

export { }