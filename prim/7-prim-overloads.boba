
overload eq as Eq? a
    : z... a^s a^r ===[ e... ][ p... ][ True ]==> z... Bool^q

instance eq : Bool
    = eq-bool

instance eq : (I8 u)
    = eq-i8

instance eq : (U8 u)
    = eq-u8

instance eq : (I16 u)
    = eq-i16

instance eq : (U16 u)
    = eq-u16

instance eq : (I32 u)
    = eq-i32

instance eq : (U32 u)
    = eq-u32

instance eq : (I64 u)
    = eq-i64

instance eq : (U64 u)
    = eq-u64

instance eq : (INative u)
    = eq-inative

instance eq : (UNative u)
    = eq-unative

instance eq : (Single u)
    = eq-single

instance eq : (Double u)
    = eq-double

instance eq : (String t c)
    = eq-string

instance eq : <= Eq? y => [y^_]
    =
    {
        let l r;
        if l length-list r length-list eq-i32 then {
            for el <= list l, er <= list r fold res <= True then {
                el er eq res and-bool
            }
        } else { False }
    }


effect iter! a
    = yield! : a ===[ e..., (iter! a) ][ p... ][ True ]==>

overload iterate as Iterate? coll elem
    : z... coll ===[ e..., (iter! elem) ][ p... ][ True ]==> z...

rule iterate-fun-dep? = Iterate? coll e1, Iterate? coll e2 => e1 = e2
rule iterate-list? = Iterate? [e1^s]^(s || r) e2 => e1^s = e2

instance iterate : [a^r]^(r || s) a^r
    =
    for el <= list then {
        el yield!
    }

export { }