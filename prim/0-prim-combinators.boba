
about:
> The kind of conrete data types that can be constructed at runtime.
kind Data : syntactic

about:
> The kind of uniqueness and linear attributes on data types.
kind Sharing : boolean

about:
> The kind of data types the are composed of a data component and a sharing component.
kind Value : syntactic

about:
> The kind of constraints that can occur in the context of a function type at the top level.
kind Constraint : syntactic

about:
> The kind of effect types, which can be optionally parameterized by values.
kind Effect : syntactic

about:
> The kinds of labeled data types in structurally-typed records and variants.
kind Field : syntactic

about:
> The kind of runtime permissions, part of the function attribute set.
kind Permission : syntactic

about:
> The kind of totality and partiality attributes on function types.
kind Totality : boolean

about:
> The kind of 'compile-time fixed size' types.
kind Fixed : abelian


kind Trust : boolean

kind Clearance : boolean


effect io!


about :
> `clear` removes all elements from the value stack.
native clear
    : z... ===[ e... ][ p... ][ True ]==>
    =
    # fiber.Clear()

about :
> `gather` grabs all elements from the value stack, and places them in a tuple.
> The tuple is then the only element on the value stack.
native gather
    : z... ===[ e... ][ p... ][ True ]==> [| z... |]^s
    =
    # fiber.Gather()

about :
> `spread` takes a tuple, which must be the *only* element on the value stack,
> and places the elements of that tuple on the value stack.
native spread
    : [| z^s... |]^((s...) || r) ===[ e... ][ p... ][ True ]==> z^s...
    =
    # fiber.Spread()


about :
> `dup` shallow copies the element at the top of the value stack, and places
> the copy at the top of the value stack.
func dup x = x x

about :
> `dupd` shallow copies the second element from the top of the value stack,
> and places the copy just below the top of the value stack.
func dupd x y = x x y

about :
> `drop` removes the element at the top of the value stack.
func drop x = 

func dip x = do x

func keep x = x do x

func nip x y = y

func over x y = x y x

func pick x y z = x y z x

func rot x y z = y z x

func swap x y = y x

func swapd x y z = y x z

func bi p q = p keep q do

func biSame x y p = x p do y p do

func biSep p q = p dip q do

func biSep2 x y p q = x p do y q do



export { }