
native nil-tuple
    : z... ===[ e... ][ p... ][ True ]==> z... [| |]^s
    =
    # arr := make([]runtime.Value, 0)
	# fiber.PushValue(arr)

native cons-tuple
    : z... [| y... |]^s x ===[ e... ][ p... ][ True ]==> z... [| y... x |]^s
    =
    # val := fiber.PopOneValue()
	# arr := fiber.PopOneValue().([]runtime.Value)
	# newArr := make([]runtime.Value, len(arr)+1)
	# copy(newArr, arr)
	# newArr[len(arr)] = val
	# fiber.PushValue(newArr)

native break-tuple
    : z... [| y^s... x^r |]^(s... or r or q) ===[ e... ][ p... ][ True ]==> z... [| y^s... |]^s... x^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[:len(arr)-1])
	# fiber.PushValue(arr[len(arr)-1])

native head-tuple
    : z... [| y^s... x^r |]^(s... or r) ===[ e... ][ p... ][ True ]==> z... x^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[len(arr)-1])

native tail-tuple
    : z... [| y^s... x^r |]^(s... or r) ===[ e... ][ p... ][ True ]==> z... [| y^s... |]^q
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[:len(arr)-1])

native length-tuple
    : z... [| y... |]^s ===[ e... ][ p... ][ True ]==> z... (I32 one)^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(int32(len(arr)))



native nil-list
    : z... ===[ e... ][ p... ][ True ]==> z... [y]^s
    =
    # arr := make([]runtime.Value, 0)
	# fiber.PushValue(arr)

native cons-list
    : z... [y]^s y ===[ e... ][ p... ][ True ]==> z... [y]^r
    =
    # val := fiber.PopOneValue()
	# arr := fiber.PopOneValue().([]runtime.Value)
	# newArr := make([]runtime.Value, len(arr)+1)
	# copy(newArr, arr)
	# newArr[len(arr)] = val
	# fiber.PushValue(newArr)

native append-list
    : z... [y]^s [y]^r ===[ e... ][ p... ][ True ]==> z... [y]^q
    =
    # lstR := fiber.PopOneValue().([]runtime.Value)
    # lstL := fiber.PopOneValue().([]runtime.Value)
    # newArr := make([]runtime.Value, len(lstR)+len(lstL))
    # copy(newArr, lstL)
    # copy(newArr[len(lstL):], lstR)
    # fiber.PushValue(newArr)

native break-list
    : z... [y^r]^(s or r) ===[ e... ][ p... ][ True ]==> z... [y^r]^q y^r 
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[:len(arr)-1])
	# fiber.PushValue(arr[len(arr)-1])

native head-list
    : z... [y^r]^(s or r) ===[ e... ][ p... ][ True ]==> z... y^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[len(arr)-1])

native tail-list
    : z... [y]^r ===[ e... ][ p... ][ True ]==> z... [y]^q
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(arr[:len(arr)-1])

native length-list
    : z... [y]^s ===[ e... ][ p... ][ True ]==> z (I32 one)^r
    =
    # arr := fiber.PopOneValue().([]runtime.Value)
	# fiber.PushValue(int32(len(arr)))

func is-empty-list = length-list 0 eq-i32

export { }