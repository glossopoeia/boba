{
open FSharp.Text.Lexing
open System
open Parser
open Boba.Compiler.Syntax
open Boba.Core.Types

let lexeme lexbuf = LexBuffer<_>.LexemeString lexbuf
}

let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')


let lower = ['a'-'z']
let upper = ['A'-'Z']

let alpha = (lower|upper)
let alphanum = (alpha|digit)

rule token = parse
| whitespace		{ token lexbuf }
| newline			{ lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexbuf }
| ";"				{ SEMICOLON }
| ","				{ COMMA }
| "^"               { CARET }
| ":"				{ COLON }
| "::"				{ DOUBLE_COLON }
| "+"				{ PLUS }
| "-"				{ MINUS }
| "*"               { STAR }
| "."				{ DOT }
| "..."				{ ELLIPSIS }
| "="				{ EQUALS }
| "@"				{ REF }
| "_"				{ UNDERSCORE }
| "|"               { BAR }
| "&&"              { DOUBLE_AMP }
| "||"              { DOUBLE_BAR }
| "("				{ L_PAREN }
| ")"				{ R_PAREN }
| "["				{ L_BRACKET }
| "]"				{ R_BRACKET }
| "{"				{ L_BRACE }
| "}"				{ R_BRACE }
| "<-"				{ L_ARROW }
| "->"				{ R_ARROW }
| "*-"              { L_STAR }
| "-*"              { R_STAR }
| "<="				{ L_BIND }
| "=>"				{ R_BIND }
| "(|"              { L_BANANA }
| "|)"              { R_BANANA }
| "{|"              { L_PUMPKIN }
| "|}"              { R_PUMPKIN }
| "[|"              { L_BOX }
| "|]"              { R_BOX }
| "<|"              { L_CONE }
| "|>"              { R_CONE }
| "-->"             { FN_CTOR }
| "===["            { FN_ARROW_BACK }
| "]==>"            { FN_ARROW_FRONT }
| "]["              { FN_DIVIDE }
| "!"               { NOT }
| "import"			{ IMPORT }
| "as"				{ AS }
| "from"            { FROM }
| "export"			{ EXPORT }
| "main"			{ MAIN }
| "about"           { ABOUT }
| "data"			{ DATA }
| "kind"            { KIND }
| "rec"				{ RECURSIVE }
| "pattern"			{ PATTERN }
| "func"			{ FUNCTION }
| "native"          { NATIVE }
| "check"			{ CHECK }
| "overload"		{ OVERLOAD }
| "instance"		{ INSTANCE }
| "rule"			{ RULE }
| "class"           { CLASS }
| "effect"			{ EFFECT }
| "tag"				{ TAG }
| "synonym"			{ SYNONYM }
| "test"			{ TEST }
| "exhaustive"		{ EXHAUSTIVE }
| "law"				{ LAW }
| "is-roughly"		{ IS_ROUGHLY }
| "satisfies"		{ SATISFIES }
| "violates"		{ VIOLATES }
| "is"				{ IS }
| "is-not"			{ IS_NOT }
| "let"				{ LET }
| "local"			{ LOCAL }
| "with-state"		{ WITH_STATE }
| "permission"      { PERMISSION }
| "trust"           { TRUST }
| "distrust"        { DISTRUST }
| "audit"           { AUDIT }
| "untag"			{ UNTAG }
| "by"              { BY }
| "per"             { PER }
| "nursery"         { NURSERY }
| "cancellable"     { CANCELLABLE }
| "handle"			{ HANDLE }
| "after"			{ AFTER }
| "with"			{ WITH }
| "inject"          { INJECT }
| "match"			{ MATCH }
| "do"				{ DO }
| "if"				{ IF }
| "switch"          { SWITCH }
| "for"				{ FOR }
| "in"              { IN }
| "when"			{ WHEN }
| "then"			{ THEN }
| "else"			{ ELSE }
| "while"			{ WHILE }
| "break"			{ BREAK }
| "final"			{ FINAL }
| "length"			{ LENGTH }
| "fill"			{ FILL }
| "result"			{ RESULT }
| "case"			{ CASE }
| "tuple"			{ TUPLE }
| "list"			{ LIST }
| "iterator"        { ITERATOR }
| "string"          { STRING_KEY }
| "vector"			{ VECTOR }
| "slice"			{ SLICE }
| "dictionary"		{ DICTIONARY }
| "True"			{ TRUE }
| "False"			{ FALSE }
| "one"             { ONE }
| "boolean"         { BOOLEAN }
| "abelian"         { ABELIAN }
| "syntactic"       { SYNTACTIC }
| ['+''-']?digit+	            { INTEGER ({ Value = lexeme lexbuf; Size = I32; Position = lexbuf.StartPos }) }
| ['+''-']?(digit+ '.'? digit+) { DECIMAL ({ Value = lexeme lexbuf; Size = Single; Position = lexbuf.StartPos }) }
| '"'[^'"']*'"'                 { STRING ({ Value = lexeme lexbuf; Position = lexbuf.StartPos }) }
| '\''[^'\'']+'\''              { CHARACTER ({ Value = lexeme lexbuf; Position = lexbuf.StartPos }) }
| '/''/'[^'\n''\r']*newline		{ lexbuf.EndPos <- lexbuf.EndPos.NextLine; token lexbuf }
| lower(alphanum|'-')*		{ SMALL_NAME ({ Name = lexeme lexbuf; Kind = ISmall; Position = lexbuf.StartPos }) }
| lower(alphanum|'-')*'!'	{ OPERATOR_NAME ({ Name = lexeme lexbuf; Kind = IOperator; Position = lexbuf.StartPos }) }
| upper(alphanum|'-')*		{ BIG_NAME ({ Name = lexeme lexbuf; Kind = IBig; Position = lexbuf.StartPos }) }
| lower(alphanum|'-')*'?'   { TEST_NAME ({ Name = lexeme lexbuf; Kind = ISmall; Position = lexbuf.StartPos }) }
| upper(alphanum|'-')*'?'	{ PREDICATE_NAME ({ Name = lexeme lexbuf; Kind = IPredicate; Position = lexbuf.StartPos }) }
| '#'[^'\n''\r']*newline    { lexbuf.EndPos <- lexbuf.EndPos.NextLine; NATIVE_CODE_LINE ({ Line = lexeme lexbuf; Position = lexbuf.StartPos }) }
| '>'[^'\n''\r']*newline    { lexbuf.EndPos <- lexbuf.EndPos.NextLine; DOCUMENTATION_LINE ({ Line = lexeme lexbuf; Position = lexbuf.StartPos }) }
| eof				{ EOF }