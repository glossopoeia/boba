%{

open Boba.Compiler.Syntax
open Boba.Core.DotSeq
open Boba.Core.Types
open Boba.Core.TypeBuilder

%}


%start unit

%token EOF

%token <Name> SMALL_NAME
%token <Name> BIG_NAME
%token <Name> OPERATOR_NAME
%token <Name> PREDICATE_NAME
%token <Name> TEST_NAME

%token <IntegerLiteral> INTEGER
%token <DecimalLiteral> DECIMAL
%token <StringLiteral> STRING

%token L_ANGLE  R_ANGLE
%token L_PAREN R_PAREN
%token L_BRACE R_BRACE
%token L_BRACKET R_BRACKET
%token L_ARROW R_ARROW
%token L_BIND R_BIND
%token FN_CTOR

%token SEMICOLON
%token COMMA
%token COLON DOUBLE_COLON
%token PLUS MINUS STAR
%token DOT
%token BAR DOUBLE_BAR
%token ELLIPSIS
%token EQUALS
%token UNDERSCORE
%token REF

%token IMPORT
%token AS
%token FROM
%token EXPORT
%token MAIN
%token DATA
%token RECURSIVE
%token PATTERN
%token CHECK
%token CLASS INSTANCE DERIVING RULE
%token EFFECT
%token TAG
%token SYNONYM
%token TEST LAW EXHAUSTIVE
%token IS_ROUGHLY IS_NOT SATISFIES VIOLATES

%token LET
%token LOCAL
%token FUNCTION
%token WITH_STATE WITH_PERMISSION
%token NEW_REF GET_REF PUT_REF
%token TRUST DISTRUST AUDIT
%token UNTAG
%token HANDLE
%token AFTER
%token WITH
%token INJECT
%token MATCH
%token DO
%token IF WHEN WHILE THEN ELSE
%token FOR BREAK FINAL FILL LENGTH RESULT
%token RECORD VARIANT
%token CASE
%token TUPLE LIST VECTOR SLICE DICTIONARY
%token TRUE FALSE AND OR NOT
%token ONE
%token IS

%type < Identifier > identifier
%type < List<CaseClause> > case_clause_list
%type < Unit > unit

%%

unit : import_list decl_list main EOF	{ UMain($1, $2, $3) }
	 | import_list decl_list export EOF	{ UExport($1, $2, $3) }

import_list :						{ [] }
		    | import import_list	{ $1 :: $2 }

decl_list :							{ [] }
		  | declaration decl_list	{ $1 :: $2 }

main : MAIN EQUALS simple_expr	{ $3 }

import : IMPORT import_path AS SMALL_NAME				{ { Explicit = []; Path = $2; Alias = $4 } }
	   | IMPORT brace_names import_path AS SMALL_NAME	{ { Explicit = $2; Path = $3; Alias = $5 } }

import_path : STRING	{ IPLocal ($1) }
			| remote	{ IPRemote ($1) }

remote : SMALL_NAME DOT SMALL_NAME DOT SMALL_NAME COLON INTEGER DOT INTEGER DOT INTEGER
		 { { Org = $1; Project = $3; Unit = $5; Major = $7; Minor = $9; Patch = $11 } }

export : EXPORT brace_names	{ $2 }

brace_names : L_BRACE name_list R_BRACE	{ $2 }

name_list :					{ [] }
		  | name name_list	{ $1 :: $2 }

name : SMALL_NAME		{ $1 }
     | BIG_NAME			{ $1 }
	 | PREDICATE_NAME	{ $1 }



declaration : function											{ DFunc ($1) }
			| RECURSIVE function								{ DRecFuncs ([$2]) }
			| RECURSIVE L_BRACE function_list R_BRACE			{ DRecFuncs ($3) }
			| PATTERN BIG_NAME param_list EQUALS pattern_expr	{ DPattern ($2, $3, $5) }
			| datatype											{ DType ($1) }
			| RECURSIVE datatype								{ DRecTypes ([$2]) }
			| RECURSIVE L_BRACE datatype_list R_BRACE			{ DRecTypes ($3) }
			| effect											{ DEffect ($1) }
			| test												{ DTest ($1) }
			| check												{ DCheck ($1) }

function : FUNCTION SMALL_NAME EQUALS simple_expr
			{ { Name = $2; FixedParams = []; Body = $4 } }
		 | FUNCTION SMALL_NAME L_ANGLE param_list R_ANGLE EQUALS simple_expr
		 	{ { Name = $2; FixedParams = $4; Body = $7 } }
		 | FUNCTION SMALL_NAME no_dot_pattern_expr_list EQUALS simple_expr
		 	{ { Name = $2; FixedParams = []; Body = [EStatementBlock([SLet { Matcher = $3; Body = [] }; SExpression($5)])] } }
		 | FUNCTION SMALL_NAME L_ANGLE param_list R_ANGLE no_dot_pattern_expr_list EQUALS simple_expr
		 	{ { Name = $2; FixedParams = $4; Body = [EStatementBlock([SLet { Matcher = $6; Body = [] }; SExpression($8)])] } }

function_list :	function				{ [$1] }
			  | function function_list	{ $1 :: $2 }

datatype : DATA BIG_NAME param_list EQUALS constructor_list	{ { Name = $2; Params = $3; Constructors = $5 } }

datatype_list :	datatype				{ [$1] }
			  | datatype datatype_list	{ $1 :: $2 }

constructor : BIG_NAME	{ { Name = $1; Components = [] } }

constructor_list : constructor						{ [$1] }
				 | constructor BAR constructor_list	{ $1 :: $3 }

effect : EFFECT OPERATOR_NAME param_list L_BRACE handler_template_list R_BRACE
			{ { Name = $2; Params = $3; Handlers = $5 } }

handler_template_list : handler_template						{ [$1] }
					  | handler_template handler_template_list	{ $1 :: $2 }

handler_template : OPERATOR_NAME COLON qual_type
					{ { Name = $1; FixedParams = []; Type = $3 } }
				 | OPERATOR_NAME L_ANGLE param_list R_ANGLE COLON qual_type
				 	{ { Name = $1; FixedParams = $3; Type = $6 } }

test : TEST TEST_NAME EQUALS simple_expr test_all simple_expr
		{ { Name = $2; Left = $4; Right = $6; Kind = $5 } }
	 | TEST TEST_NAME EQUALS simple_expr test_is WITH L_BRACE simple_expr R_BRACE simple_expr
	 	{ { Name = $2; Left = $4; Right = $10; Kind = $5 $8 } }

test_all : SATISFIES	{ TKSatisfies }
		 | VIOLATES		{ TKViolates }
		 | IS_ROUGHLY	{ TKIsRoughly }
		 | test_is		{ $1 [] }

test_is : IS		{ TKIs }
		| IS_NOT	{ TKIsNot }

check : CHECK SMALL_NAME COLON qual_type	{ { Name = $2; Matcher = $4 } }



qual_type : predicate_list R_BIND any_type			{ { SContext = $1; SHead = $3 } }
		  | any_type								{ { SContext = []; SHead = $1 } }

predicate_list : predicate							{ [$1] }
			   | predicate COMMA predicate_list		{ $1 :: $3 }

predicate : identifier any_type_list				{ { SName = $1; SArguments = $2 } }

any_type : SMALL_NAME								{ STVar $1 }
		 | identifier								{ STCon $1 }
		 | SMALL_NAME ELLIPSIS						{ STDotVar $1 }
		 | FN_CTOR									{ STPrim PrFunction }
		 | TRUE										{ STTrue }
		 | FALSE									{ STFalse }
		 | L_PAREN any_type AND any_type R_PAREN	{ STAnd ($2, $4) }
		 | L_PAREN any_type OR any_type R_PAREN		{ STOr ($2, $4) }
		 | L_PAREN NOT any_type R_PAREN				{ STNot ($3) }
		 | L_PAREN any_type BAR any_type R_PAREN	{ appendTypeArgs STRowExtend [$4; $2] }
		 | ONE										{ STAbelianOne }
		 | L_PAREN any_type STAR INTEGER R_PAREN	{ STExponent ($2, $4) }
		 | L_PAREN any_type PLUS any_type R_PAREN	{ STMultiply ($2, $4) }
		 | INTEGER									{ STFixedConst $1 }
		 | DOT										{ STRowEmpty }
		 | L_BRACKET any_type_list R_BRACKET		{ STSeq (dotVarToDotSeq (ofList (List.rev $2))) }
		 | L_PAREN any_type any_type_list R_PAREN	{ appendTypeArgs $2 (List.rev $3) }
		 | L_BRACE any_type any_type any_type R_BRACE
		 	{ appendTypeArgs (STPrim PrValue) [$4; $3; $2] }

any_type_list :							{ [] }
			  | any_type any_type_list	{ $1 :: $2 }



term_statement_block : L_BRACE term_statement_list R_BRACE	{ $2 }

term_statement_list : term_statement								{ [$1] }
					| term_statement SEMICOLON term_statement_list 	{ $1 :: $3 }

term_statement : LET no_dot_pattern_expr_list						{ SLet { Matcher = $2; Body = [] } }
			   | LET no_dot_pattern_expr_list EQUALS simple_expr	{ SLet { Matcher = $2; Body = $4 } }
			   | local_function										{ SLocals ([$1]) }
			   | RECURSIVE L_BRACE local_function_list R_BRACE		{ SLocals ($3) }
			   | simple_expr										{ SExpression ($1) }

local_function_list : local_function						{ [$1] }
					| local_function local_function_list	{ $1 :: $2 }

local_function : LOCAL FUNCTION SMALL_NAME EQUALS simple_expr	{ { Name = $3; Body = $5 } }

simple_expr :					{ [] }
			| word simple_expr	{ $1 :: $2 }


simple_expr_list :										{ [] }
				 | simple_expr COMMA simple_expr_list	{ $1 :: $3 }



word : term_statement_block				{ EStatementBlock ($1) }
	 | handle_word						{ $1 }
	 | inject_word						{ $1 }
	 | match_word						{ $1 }
	 | if_word							{ $1 }
	 | when_word						{ $1 }
	 | while_word						{ $1 }
	 | function_literal					{ EFunctionLiteral ($1) }
	 | tuple_literal					{ $1 }
	 | list_literal						{ $1 }
	 | vector_literal					{ $1 }
	 | slice_literal					{ $1 }
	 | record_literal					{ $1 }
	 | PLUS SMALL_NAME					{ EExtension ($2) }
	 | MINUS SMALL_NAME					{ ERestriction ($2) }
	 | R_ARROW SMALL_NAME				{ ESelect ($2) }
	 //| record_update					{ EUpdate ($1) }
	 | variant_literal					{ $1 }
	 | DOUBLE_BAR SMALL_NAME			{ EEmbedding ($2) }
	 | case_word						{ $1 }
	 | WITH_STATE term_statement_block	{ EWithState ($2) }
	 | with_permission					{ $1 }
	 | TRUST							{ ETrust }
	 | DISTRUST							{ EDistrust }
	 | AUDIT							{ EAudit }
	 | NEW_REF							{ ENewRef }
	 | GET_REF							{ EGetRef }
	 | PUT_REF							{ EPutRef }
	 | UNTAG qualified_name 			{ EUntag ($2) }
	 | DO								{ EDo }

	 | TRUE								{ ETrue }
	 | FALSE							{ EFalse }
	 | INTEGER							{ EInteger ($1) }
	 | DECIMAL							{ EDecimal ($1) }
	 | STRING							{ EString ($1) }
	 | identifier						{ EIdentifier ($1) }

with_permission : WITH_PERMISSION param_list term_statement_block	{ EWithPermission ($2, $3) }

handle_word : HANDLE param_list term_statement_block WITH L_BRACE handler_list return SEMICOLON R_BRACE	{ EHandle ($2, $3, $6, $7) }
			| HANDLE param_list term_statement_block WITH L_BRACE handler_list R_BRACE					{ EHandle ($2, $3, $6, []) }

handler : identifier param_list R_BIND simple_expr SEMICOLON
			{ { Name = $1; FixedParams = []; Params = $2; Body = $4; } }
		| identifier L_ANGLE param_list R_ANGLE param_list R_BIND simple_expr SEMICOLON
			{ { Name = $1; FixedParams = $3; Params = $5; Body = $7; } }

return : AFTER R_BIND simple_expr
			{ $3 }
	   | AFTER no_dot_pattern_expr_list R_BIND simple_expr
	   		{ [EStatementBlock([SLet { Matcher = $2; Body = [] }; SExpression($4)])] }

param_list :						{ [] }
		   | SMALL_NAME param_list 	{ $1 :: $2 }

handler_list :						{ [] }
			 | handler handler_list	{ $1 :: $2 }

inject_word : INJECT eff_list term_statement_block	{ EInject ($2, $3) }

eff_list : OPERATOR_NAME			{ [$1] }
		 | OPERATOR_NAME eff_list	{ $1 :: $2 }

match_word : MATCH L_BRACE match_clause_list R_BRACE									{ EMatch ($3, []) }
		   | MATCH L_BRACE match_clause_list ELSE R_BIND simple_expr SEMICOLON R_BRACE	{ EMatch ($3, $6) }

match_clause_list :	match_clause					{ [$1] }
				  | match_clause match_clause_list	{ $1 :: $2 }

match_clause : pattern_expr_list R_BIND simple_expr SEMICOLON	{ { Matcher = $1; Body = $3 } }

if_word : IF simple_expr THEN term_statement_block ELSE term_statement_block	{ EIf ($2, $4, $6) }

when_word : WHEN simple_expr THEN term_statement_block	{ EIf ($2, $4, []) }

while_word : WHILE simple_expr THEN term_statement_block	{ EWhile ($2, $4) }

function_literal : L_PAREN simple_expr R_PAREN	{ $2 }
				 | L_PAREN no_dot_pattern_expr_list R_BIND simple_expr R_PAREN
				 	{ [EStatementBlock([SLet { Matcher = $2; Body = [] }; SExpression($4)])] }

tuple_literal : TUPLE L_BRACKET simple_expr_list R_BRACKET					{ ETupleLiteral ([], $3) }
			  | TUPLE L_BRACKET simple_expr WITH simple_expr_list R_BRACKET	{ ETupleLiteral ($3, $5) }

list_literal : LIST L_BRACKET simple_expr_list R_BRACKET					{ EListLiteral ([], $3) }
			 | LIST L_BRACKET simple_expr WITH simple_expr_list R_BRACKET	{ EListLiteral ($3, $5) }

vector_literal : VECTOR L_BRACKET simple_expr_list R_BRACKET					{ EVectorLiteral ([], $3) }
			   | VECTOR L_BRACKET simple_expr WITH simple_expr_list R_BRACKET	{ EVectorLiteral ($3, $5) }

slice_literal : SLICE L_BRACKET fixed_size_term_expr ELLIPSIS fixed_size_term_expr R_BRACKET	{ ESliceLiteral ($3, $5) }

record_literal : RECORD L_BRACE simple_expr WITH field_list R_BRACE	{ ERecordLiteral ($3, $5) }
			   | RECORD L_BRACE field_list R_BRACE					{ ERecordLiteral ([], $3) }

variant_literal : VARIANT L_BRACE field R_BRACE { EVariantLiteral ($3) }

case_word : CASE L_BRACE case_clause_list ELSE R_BIND simple_expr SEMICOLON R_BRACE	{ ECase ($3, $6) }

case_clause_list : case_clause					{ [$1] }
				 | case_clause case_clause_list	{ $1 :: $2 }

case_clause : SMALL_NAME R_BIND simple_expr SEMICOLON	{ { Tag = $1; Body = $3 } }

field_list :						{ [] }
		   | field COMMA field_list	{ $1 :: $3 }

field : SMALL_NAME EQUALS simple_expr	{ ($1, $3) }

identifier : qualified_name L_ANGLE fixed_size_term_expr R_ANGLE	{ { Qualifier = List.take ($1.Length - 1) $1; Name = List.last $1; Size = Some ($3) } }
		   | qualified_name											{ { Qualifier = List.take ($1.Length - 1) $1; Name = List.last $1; Size = None } }

qualified_name : SMALL_NAME								{ [$1] }
			   | BIG_NAME								{ [$1] }
			   | OPERATOR_NAME							{ [$1] }
			   | PREDICATE_NAME							{ [$1] }
			   | SMALL_NAME DOUBLE_COLON qualified_name	{ $1 :: $3 }

qualified_ctor : BIG_NAME								{ [$1] }
			   | SMALL_NAME DOUBLE_COLON qualified_ctor	{ $1 :: $3 }



no_dot_pattern_expr_list : pattern_expr						{ ind $1 SEnd }
						 | pattern_expr pattern_expr_list	{ ind $1 $2 }

pattern_expr_list :	pattern_expr					{ ind $1 SEnd }
				  | pattern_expr ELLIPSIS			{ dot $1 SEnd }
				  | pattern_expr pattern_expr_list 	{ ind $1 $2 }

field_pattern_list : SMALL_NAME EQUALS pattern_expr						{ ind ($1, $3) SEnd }
				   | SMALL_NAME ELLIPSIS								{ dot ($1, PWildcard) SEnd }
				   | SMALL_NAME EQUALS pattern_expr field_pattern_list	{ ind ($1, $3) $4 }

pattern_expr : TRUE												{ PTrue }
			 | FALSE											{ PFalse }
			 | INTEGER											{ PInteger ($1) }
			 | DECIMAL											{ PDecimal ($1) }
			 | STRING											{ PString ($1) }
			 | UNDERSCORE										{ PWildcard }
			 | REF pattern_expr									{ PRef ($2) }
			 | SMALL_NAME										{ PNamed ($1, PWildcard) }
			 | SMALL_NAME IS pattern_expr 						{ PNamed ($1, $3) }
			 | qualified_ctor
			 	{ PConstructor ({ Qualifier = List.take ($1.Length - 1) $1; Name = List.last $1; Size = None }, SEnd) }
			 | L_PAREN qualified_ctor pattern_expr_list R_PAREN
			 	{ PConstructor ({ Qualifier = List.take ($2.Length - 1) $2; Name = List.last $2; Size = None }, $3) }
			 | tuple_pattern									{ $1 }
			 | list_pattern										{ $1 }
			 | vector_pattern									{ $1 }
			 | slice_pattern									{ $1 }
			 | record_pattern									{ $1 }

tuple_pattern : TUPLE L_BRACE pattern_expr_list R_BRACE			{ PTuple ($3) }

list_pattern : LIST L_BRACE pattern_expr_list R_BRACE			{ PList ($3) }

vector_pattern : VECTOR L_BRACE pattern_expr_list R_BRACE		{ PVector ($3) }

slice_pattern : SLICE L_BRACE pattern_expr_list R_BRACE			{ PSlice ($3) }

record_pattern : RECORD L_BRACE field_pattern_list R_BRACE		{ PRecord ($3) }



fixed_size_term_expr : fixed_size_term_factor_list	{ $1 }

fixed_size_term_factor_list : fixed_size_term_factor									{ [$1] }
							| fixed_size_term_factor PLUS fixed_size_term_factor_list 	{ $1 :: $3 }

fixed_size_term_factor : INTEGER			{ FixConst ($1) }
					   | SMALL_NAME			{ FixVar ($1) }
					   | INTEGER SMALL_NAME { FixCoeff ($1, $2) }