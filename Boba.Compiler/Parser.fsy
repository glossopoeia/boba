%{

open Boba.Compiler.Syntax
open Boba.Core.DotSeq
open Boba.Core.Kinds
open Boba.Core.Types
open Boba.Core.TypeBuilder

%}


%start unit

%token EOF

%token <Name> SMALL_NAME
%token <Name> BIG_NAME
%token <Name> OPERATOR_NAME
%token <Name> PREDICATE_NAME
%token <Name> TEST_NAME

%token <IntegerLiteral> INTEGER
%token <DecimalLiteral> DECIMAL
%token <StringLiteral> STRING
%token <CharacterLiteral> CHARACTER

%token <NativeCodeLine> NATIVE_CODE_LINE
%token <DocumentationLine> DOCUMENTATION_LINE

%token L_PAREN R_PAREN
%token L_BRACE R_BRACE
%token L_BRACKET R_BRACKET
%token L_ARROW R_ARROW
%token L_STAR R_STAR
%token L_BIND R_BIND
%token L_BANANA R_BANANA
%token L_PUMPKIN R_PUMPKIN
%token L_BOX R_BOX
%token L_CONE R_CONE
%token FN_CTOR FN_ARROW_BACK FN_ARROW_FRONT FN_DIVIDE

%token SEMICOLON
%token COMMA
%token CARET
%token COLON DOUBLE_COLON
%token PLUS MINUS STAR
%token DOT
%token BAR
%token DOUBLE_AMP DOUBLE_BAR
%token ELLIPSIS
%token EQUALS
%token UNDERSCORE
%token REF

%token IMPORT
%token AS
%token FROM
%token EXPORT
%token MAIN
%token ABOUT
%token DATA
%token KIND
%token RECURSIVE
%token PATTERN
%token CHECK
%token OVERLOAD INSTANCE RULE CLASS
%token EFFECT
%token TAG
%token SYNONYM
%token TEST LAW EXHAUSTIVE
%token IS_ROUGHLY IS_NOT SATISFIES VIOLATES

%token BOOLEAN ABELIAN SYNTACTIC

%token LET
%token LOCAL
%token FUNCTION NATIVE
%token WITH_STATE PERMISSION
%token TRUST DISTRUST AUDIT
%token BY OF PER
%token NURSERY CANCELLABLE
%token HANDLE
%token AFTER
%token WITH
%token INJECT
%token MATCH
%token DO
%token IF WHEN SWITCH WHILE THEN ELSE
%token FOR IN BREAK FINAL FILL LENGTH RESULT
%token CASE
%token TUPLE LIST ITERATOR STRING_KEY VECTOR SLICE DICTIONARY
%token TRUE FALSE NOT
%token ONE
%token IS

%type < Identifier > identifier
%type < List<CaseClause> > case_clause_list
%type < Unit > unit

%%

unit : import_list decl_list main EOF	{ UMain($1, $2, $3) }
	 | import_list decl_list export EOF	{ UExport($1, $2, $3) }

import_list :						{ [] }
		    | import import_list	{ $1 :: $2 }

decl_list :							{ [] }
		  | declaration decl_list	{ $1 :: $2 }

main : MAIN EQUALS simple_expr	{ $3 }

import : IMPORT import_path AS SMALL_NAME				{ { Native = false; Explicit = []; Path = $2; Alias = $4 } }
	   | IMPORT brace_names import_path AS SMALL_NAME	{ { Native = false; Explicit = $2; Path = $3; Alias = $5 } }
	   | IMPORT NATIVE STRING							{ { Native = true; Explicit = []; Path = IPLocal ($3); Alias = stringToSmallName "" } }

import_path : STRING	{ IPLocal ($1) }
			| remote	{ IPRemote ($1) }

remote : SMALL_NAME DOT SMALL_NAME DOT SMALL_NAME COLON INTEGER DOT INTEGER DOT INTEGER
		 { { Org = $1; Project = $3; Unit = $5; Major = $7; Minor = $9; Patch = $11 } }

export : EXPORT brace_names	{ $2 }

brace_names : L_BRACE name_list R_BRACE	{ $2 }

name_list :					{ [] }
		  | name name_list	{ $1 :: $2 }

name : SMALL_NAME		{ $1 }
     | BIG_NAME			{ $1 }
	 | PREDICATE_NAME	{ $1 }



declaration : function											{ DFunc ($1) }
			| RECURSIVE function								{ DRecFuncs ([$2]) }
			| RECURSIVE L_BRACE function_list R_BRACE			{ DRecFuncs ($3) }
			| native											{ DNative ($1) }
			| PATTERN BIG_NAME param_list EQUALS pattern_expr	{ DPattern ($2, $3, $5) }
			| userkind											{ DKind ($1) }
			| datatype											{ DType ($1) }
			| RECURSIVE datatype								{ DRecTypes ([$2]) }
			| RECURSIVE L_BRACE datatype_list R_BRACE			{ DRecTypes ($3) }
			| synonym											{ $1 }
			| overload											{ $1 }
			| instance											{ $1 }
			| rule												{ $1 }
			| class												{ $1 }
			| effect											{ DEffect ($1) }
			| test												{ DTest ($1) }
			| law												{ DLaw ($1) }
			| check												{ DCheck ($1) }
			| tag												{ $1 }

documentation : ABOUT COLON documentation_lines		{ $3 }

documentation_lines :											{ [] }
					| DOCUMENTATION_LINE documentation_lines	{ $1 :: $2 }

function : FUNCTION SMALL_NAME EQUALS simple_expr
			{ { Name = $2; Docs = []; Body = $4 } }
		 | FUNCTION SMALL_NAME no_dot_pattern_expr_list EQUALS simple_expr
		 	{ { Name = $2; Docs = []; Body = [EStatementBlock([SLet { Matcher = $3; Body = [] }; SExpression($5)])] } }
		 | documentation FUNCTION SMALL_NAME EQUALS simple_expr
		 	{ { Name = $3; Docs = $1; Body = $5 } }
		 | documentation FUNCTION SMALL_NAME no_dot_pattern_expr_list EQUALS simple_expr
		 	{ { Name = $3; Docs = $1; Body = [EStatementBlock([SLet { Matcher = $4; Body = [] }; SExpression($6)])] } }

function_list :	function				{ [$1] }
			  | function function_list	{ $1 :: $2 }

native : NATIVE SMALL_NAME COLON qual_fn_type EQUALS native_code_list
			{ { Name = $2; Docs = []; Type = $4; Lines = $6 } }
	   | documentation NATIVE SMALL_NAME COLON qual_fn_type EQUALS native_code_list
	   		{ { Name = $3; Docs = $1; Type = $5; Lines = $7 } }

native_code_list : 										{ [] }
				 | NATIVE_CODE_LINE native_code_list	{ $1 :: $2 }

userkind : KIND BIG_NAME COLON kind_unify
			{ { Name = $2; Docs = []; Unify = $4 } }
		 | documentation KIND BIG_NAME COLON kind_unify
		 	{ { Name = $3; Docs = $1; Unify = $5 } }

kind_unify : BOOLEAN		{ KUBoolean }
		   | ABELIAN		{ KUAbelian }
		   | SYNTACTIC		{ KUSyntactic }

datatype : DATA BIG_NAME type_param_list EQUALS constructor_list
			{ { Name = $2; Docs = []; Params = $3; Constructors = $5; Kind = SKBase (sIdentifier [] (stringToBigName "Data")) } }
		 | documentation DATA BIG_NAME type_param_list EQUALS constructor_list
			{ { Name = $3; Docs = $1; Params = $4; Constructors = $6; Kind = SKBase (sIdentifier [] (stringToBigName "Data")) } }
		 | DATA BIG_NAME type_param_list
		 	{ { Name = $2; Docs = []; Params = $3; Constructors = []; Kind = SKBase (sIdentifier [] (stringToBigName "Data")) } }
		 | documentation DATA BIG_NAME type_param_list
		 	{ { Name = $3; Docs = $1; Params = $4; Constructors = []; Kind = SKBase (sIdentifier [] (stringToBigName "Data")) } }
		 | DATA BIG_NAME COLON compound_kind
		 	{ { Name = $2; Docs = []; Params = []; Constructors = []; Kind = $4 } }
		 | documentation DATA BIG_NAME COLON compound_kind
		 	{ { Name = $3; Docs = $1; Params = []; Constructors = []; Kind = $5 } }

type_param_list :
					{ [] }
				| type_param_list SMALL_NAME
					{ List.append $1 [($2, SKBase (sIdentifier [] (stringToBigName "Value")))] }
				| type_param_list L_PAREN SMALL_NAME COLON compound_kind R_PAREN
					{ List.append $1 [($3, $5)] }

datatype_list :	datatype				{ [$1] }
			  | datatype datatype_list	{ $1 :: $2 }

constructor : BIG_NAME COLON R_BIND base_type
				{ { Name = $1; Docs = []; Components = []; Result = $4 } }
			| BIG_NAME COLON type_arg_list R_BIND base_type
				{ { Name = $1; Docs = []; Components = List.rev $3; Result = $5 } }

constructor_list : constructor						{ [$1] }
				 | constructor BAR constructor_list	{ $1 :: $3 }

synonym : SYNONYM BIG_NAME param_list EQUALS base_type
			{ DTypeSynonym ($2, $3, $5) }

rule : RULE TEST_NAME EQUALS predicate_list R_BIND constraint_list
	 	{ DPropagationRule ($2, toList $4, $6) }

class : CLASS PREDICATE_NAME param_list EQUALS predicate_list
		{ DClass ($2, $3, toList $5) }

overload : OVERLOAD SMALL_NAME AS PREDICATE_NAME opt_type_param_list COLON qual_fn_type
			{ DOverload { Name = $2; Docs = []; Predicate = $4; Template = $7; Bodies = []; Params = $5 } }
		 | documentation OVERLOAD SMALL_NAME AS PREDICATE_NAME opt_type_param_list COLON qual_fn_type
		 	{ DOverload { Name = $3; Docs = $1; Predicate = $5; Template = $8; Bodies = []; Params = $6 } }

opt_type_param_list :
						{ [] }
					| opt_type_param_list SMALL_NAME
						{ List.append $1 [($2, SKWildcard)] }
					| opt_type_param_list L_PAREN SMALL_NAME COLON compound_kind R_PAREN
						{ List.append $1 [($3, $5)] }

instance : INSTANCE SMALL_NAME COLON type_arg_list EQUALS simple_expr
			{ DInstance { Name = $2; Context = SEnd; Heads = List.rev $4; Body = $6 } }
		 | INSTANCE SMALL_NAME COLON L_BIND predicate_list R_BIND type_arg_list EQUALS simple_expr
		 	{ DInstance { Name = $2; Context = $5; Heads = List.rev $7; Body = $9 } }

effect : EFFECT OPERATOR_NAME opt_type_param_list EQUALS handler_template_list
			{ { Name = $2; Docs = []; Params = $3; Handlers = $5 } }
	   | documentation EFFECT OPERATOR_NAME opt_type_param_list EQUALS handler_template_list
			{ { Name = $3; Docs = $1; Params = $4; Handlers = $6 } }
	   | EFFECT OPERATOR_NAME opt_type_param_list
	   		{ { Name = $2; Docs = []; Params = $3; Handlers = [] } }
	   | documentation EFFECT OPERATOR_NAME opt_type_param_list
	   		{ { Name = $3; Docs = []; Params = $4; Handlers = [] } }

handler_template_list : handler_template							{ [$1] }
					  | handler_template_list BAR handler_template	{ List.append $1 [$3] }

handler_template : OPERATOR_NAME COLON qual_fn_type	{ { Name = $1; Type = $3 } }

test : TEST TEST_NAME EQUALS simple_expr test_all simple_expr
		{ { Name = $2; Left = $4; Right = $6; Kind = $5 } }

law : LAW TEST_NAME law_param_list EQUALS simple_expr test_all simple_expr
		{ { Name = $2; Exhaustive = false; Params = $3; Left = $5; Right = $7; Kind = $6 } }

law_param_list : law_param						{ [$1] }
			   | law_param COMMA law_param_list	{ $1 :: $3 }

law_param : SMALL_NAME IN simple_expr	{ { Name = $1; Generator = $3 } }

test_all : SATISFIES	{ TKSatisfies }
		 | VIOLATES		{ TKViolates }
		 | IS_ROUGHLY	{ TKIsRoughly }
		 | IS			{ TKIs [] }
		 | IS_NOT		{ TKIsNot [] }
		 | IS BY L_BRACE simple_expr R_BRACE		{ TKIs $4 }
		 | IS_NOT BY L_BRACE simple_expr R_BRACE	{ TKIsNot $4 }

check : CHECK SMALL_NAME COLON qual_fn_type		{ { Name = $2; Matcher = $4 } }

tag : TAG BIG_NAME EQUALS SMALL_NAME	{ DTag ($2, $4) }



base_kind : type_identifier						{ SKBase $1 }
		  | L_PAREN compound_kind R_PAREN		{ $2 }

compound_kind : L_BRACKET compound_kind R_BRACKET	{ SKSeq $2 }
			  | L_BRACE compound_kind R_BRACE		{ SKRow $2 }
			  | base_kind 							{ $1 }
			  | base_kind FN_CTOR compound_kind		{ SKArrow ($1, $3) }



constraint_list : constraint						{ [$1] }
				| constraint COMMA constraint_list	{ $1 :: $3 }

constraint : predicate 							{ SCPredicate $1 }
		   | compound_type EQUALS compound_type	{ SCEquality ($1, $3) }

predicate_list : predicate								{ ind $1 SEnd }
			   | L_PAREN predicate R_PAREN ELLIPSIS		{ dot $2 SEnd }
			   | predicate_list COMMA predicate			{ ind $3 $1 }

predicate : pred_identifier type_arg_list			{ appendTypeArgs (STCon $1) (List.rev $2) }

qual_fn_type : top_fn_type									{ sQualType SEnd $1 }
			 | L_BIND predicate_list R_BIND top_fn_type		{ sQualType $2 $4 }

base_type : TRUE											{ STTrue }
		  | FALSE											{ STFalse }
		  | SMALL_NAME										{ STVar $1 }
		  | L_PAREN SMALL_NAME ELLIPSIS	R_PAREN				{ STDotVar $2 }
		  | type_identifier									{ STCon $1 }
		  | FN_CTOR											{ STPrim PrFunction }
		  | ONE												{ STAbelianOne }
		  | DOT												{ STRowEmpty }
		  | UNDERSCORE										{ STWildcard }
		  | L_BANANA fn_type R_BANANA						{ $2 }
		  | L_PAREN compound_type R_PAREN					{ $2 }
		  | L_PAREN compound_type type_arg_list R_PAREN		{ appendTypeArgs $2 (List.rev $3) }
		  | L_PUMPKIN field_row_type R_PUMPKIN				{ appendTypeArgs (STPrim PrRecord) [$2] }
		  | L_CONE field_row_type R_CONE					{ appendTypeArgs (STPrim PrVariant) [$2] }
		  | L_BRACKET compound_type R_BRACKET				{ appendTypeArgs (STPrim PrList) [$2] }
		  | L_BOX fn_type_seq R_BOX							{ appendTypeArgs (STPrim PrTuple) [STSeq ($2, primValueKind)] }

val_type : base_type CARET base_type			{ appendTypeArgs (STPrim PrValue) [$3; $1] }

top_fn_type : fn_type	{ appendTypeArgs (STPrim PrValue) [STFalse; $1] }

fn_type : fn_type_seq FN_ARROW_BACK fn_row_type FN_DIVIDE fn_row_type FN_DIVIDE compound_type FN_ARROW_FRONT fn_type_seq
			{ appendTypeArgs (STPrim PrFunction)
                [STSeq ($9, primValueKind);
                    STSeq ($1, primValueKind);
                    $7; $5; $3] }

fn_type_seq : 										{ SEnd }
			| fn_type_seq compound_type ELLIPSIS	{ dot $2 $1 }
			| fn_type_seq compound_type				{ ind $2 $1 }

fn_row_type : DOT							{ STRowEmpty }
			| SMALL_NAME ELLIPSIS			{ STVar $1 }
			| fn_row_type COMMA compound_type	{ appendTypeArgs STRowExtend [$1; $3] }

field_row_type : DOT								{ STRowEmpty }
			   | SMALL_NAME ELLIPSIS				{ STVar $1 }
			   | field_row_type COMMA field_type	{ appendTypeArgs STRowExtend [$1; $3] }

field_type : SMALL_NAME EQUALS compound_type		{ appendTypeArgs (STCon { Qualifier = []; Name = $1 }) [$3] }
		   | compound_type							{ $1 }

compound_type : base_type							{ $1 }
			  | val_type							{ $1 }
			  | base_type CARET INTEGER				{ STExponent ($1, $3) }
			  | and_sequence						{ $1 }
			  | or_sequence							{ $1 }
			  | mul_sequence						{ $1 }
			  | NOT compound_type					{ STNot $2 }

and_sequence : base_type DOUBLE_AMP base_type				{ STAnd ($1, $3) }
			 | and_sequence DOUBLE_AMP base_type			{ STAnd ($1, $3) }

or_sequence : base_type DOUBLE_BAR base_type	{ STOr ($1, $3) }
			| or_sequence DOUBLE_BAR base_type	{ STOr ($1, $3) }

mul_sequence : base_type STAR base_type		{ STMultiply ($1, $3) }
			 | INTEGER STAR base_type		{ STMultiply (STFixedConst $1, $3) }
			 | base_type STAR INTEGER		{ STMultiply ($1, STFixedConst $3) }
			 | mul_sequence STAR base_type	{ STMultiply ($1, $3) }
			 | mul_sequence STAR INTEGER	{ STMultiply ($1, STFixedConst $3) }

type_arg_list : compound_type				{ [$1] }
			  | type_arg_list compound_type	{ List.append $1 [$2] }



term_statement_block : L_BRACE term_statement_list R_BRACE	{ $2 }

term_statement_list : term_statement								{ [$1] }
					| term_statement_list SEMICOLON term_statement 	{ List.append $1 [$3] }

term_statement : LET no_dot_pattern_expr_list								{ SLet { Matcher = $2; Body = [] } }
			   | LET no_dot_pattern_expr_list EQUALS non_empty_simple_expr	{ SLet { Matcher = $2; Body = $4 } }
			   //| local_function											{ SLocals ([$1]) }
			   //| RECURSIVE L_BRACE local_function_list R_BRACE			{ SLocals ($3) }
			   | non_empty_simple_expr										{ SExpression ($1) }

// local_function_list : local_function						{ [$1] }
// 					| local_function local_function_list	{ $1 :: $2 }

// local_function : LOCAL FUNCTION SMALL_NAME EQUALS simple_expr	{ { Name = $3; Body = $5 } }

non_empty_simple_expr : word									{ [$1] }
					  | record_literal							{ $1 }
					  | tuple_literal							{ $1 }
					  | list_literal							{ $1 }
					  | non_empty_simple_expr word				{ List.append $1 [$2] }
					  | non_empty_simple_expr record_literal	{ List.append $1 $2 }
					  | non_empty_simple_expr tuple_literal		{ List.append $1 $2 }
					  | non_empty_simple_expr list_literal		{ List.append $1 $2 }

simple_expr :								{ [] }
			| non_empty_simple_expr			{ $1 }



word : term_statement_block				{ EStatementBlock ($1) }
	 | nursery_word						{ $1 }
	 | cancellable_word					{ $1 }
	 | handle_word						{ $1 }
	 | inject_word						{ $1 }
	 | match_word						{ $1 }
	 | if_word							{ $1 }
	 | switch_word						{ $1 }
	 | when_word						{ $1 }
	 | while_word						{ $1 }
	 | for_word							{ $1 }
	 | function_literal					{ EFunctionLiteral ($1) }
	 //| tuple_literal					{ $1 }
	 //| list_literal						{ $1 }
	 //| vector_literal					{ $1 }
	 //| slice_literal					{ $1 }
	 //| record_literal					{ $1 }
	 | R_ARROW SMALL_NAME				{ EExtension ($2) }
	 | L_ARROW SMALL_NAME				{ ESelect (false, $2) }
	 | L_STAR SMALL_NAME				{ ESelect (true, $2) }
	 //| record_update					{ EUpdate ($1) }
	 | variant_literal					{ $1 }
	 | case_word						{ $1 }
	 | WITH_STATE term_statement_block	{ EWithState ($2) }
	 | permission						{ $1 }
	 | TRUST							{ ETrust }
	 | DISTRUST							{ EDistrust }
	 | AUDIT							{ EAudit }
	 | tag_expression					{ $1 }
	 | DO								{ EDo }

	 | TRUE								{ ETrue }
	 | FALSE							{ EFalse }
	 | INTEGER							{ EInteger ($1) }
	 | DECIMAL							{ EDecimal ($1) }
	 | STRING							{ EString ($1) }
	 | CHARACTER						{ ECharacter ($1) }
	 | identifier						{ EIdentifier ($1) }

permission : WITH PERMISSION param_list THEN term_statement_block ELSE term_statement_block
				{ EWithPermission ($3, $5, $7) }
		   | IF PERMISSION param_list THEN term_statement_block ELSE term_statement_block
				{ EIfPermission ($3, $5, $7) }

nursery_word : NURSERY SMALL_NAME term_statement_block	{ ENursery($2, $3) }

cancellable_word : CANCELLABLE SMALL_NAME term_statement_block { ECancellable($2, $3) }

handle_word : HANDLE param_list term_statement_block WITH L_BRACE handler_list return R_BRACE
				{ EHandle ($2, $3, $6, $7) }
			| HANDLE param_list term_statement_block WITH L_BRACE handler_list R_BRACE
				{ EHandle ($2, $3, $6, []) }

handler : BAR identifier param_list R_BIND simple_expr	{ { Name = $2; Params = $3; Body = $5; } }

return : BAR AFTER R_BIND simple_expr
			{ $4 }
	   | BAR AFTER no_dot_pattern_expr_list R_BIND simple_expr
	   		{ [EStatementBlock([SLet { Matcher = $3; Body = [] }; SExpression($5)])] }

param_list :						{ [] }
		   | param_list SMALL_NAME 	{ List.append $1 [$2] }

handler_list :						{ [] }
			 | handler_list handler	{ List.append $1 [$2] }

inject_word : INJECT eff_list term_statement_block	{ EInject ($2, $3) }

eff_list : OPERATOR_NAME			{ [$1] }
		 | OPERATOR_NAME eff_list	{ $1 :: $2 }

match_word : MATCH L_BRACE match_clause_list R_BRACE								{ EMatch ($3, []) }
		   | MATCH L_BRACE match_clause_list BAR ELSE R_BIND simple_expr R_BRACE	{ EMatch ($3, $7) }

match_clause_list :	match_clause					{ [$1] }
				  | match_clause_list match_clause	{ List.append $1 [$2] }

match_clause : BAR pattern_expr_list R_BIND simple_expr	{ { Matcher = $2; Body = $4 } }

if_word : IF simple_expr THEN term_statement_block ELSE term_statement_block	{ EIf ($2, $4, $6) }

switch_word : SWITCH L_BRACE switch_clause_list R_BRACE	{ switchClausesToIfs $3 }

switch_clause_list : BAR ELSE R_BIND simple_expr								{ [$4] }
				   | BAR simple_expr R_BIND simple_expr switch_clause_list	{ $2 :: $4 :: $5 }

when_word : WHEN simple_expr THEN term_statement_block	{ EIf ($2, $4, []) }

while_word : WHILE simple_expr THEN term_statement_block	{ EWhile ($2, $4) }

for_word : FOR parallel_sequences THEN term_statement_block
			{ EForEffect ($2, $4) }
		 | FOR parallel_sequences AS for_results THEN term_statement_block
		 	{ EForComprehension ($4, $2, $6) }
		 | FOR parallel_sequences RESULT fold_inits THEN term_statement_block
		 	{ EForFold ($4, $2, $6) }

for_results : for_result					{ [$1] }
			| for_result COMMA for_results	{ $1 :: $3 }

for_result : TUPLE		{ FForTuple }
		   | LIST		{ FForList }
		   | VECTOR		{ FForVector }
		   | STRING_KEY	{ FForString }

for_sequence : TUPLE		{ FForTuple }
			 | LIST			{ FForList }
			 | VECTOR		{ FForVector }
			 | STRING_KEY	{ FForString }
			 | 				{ FForIterator }

parallel_sequences : SMALL_NAME IN for_sequence simple_expr
						{ [{ Name = $1; SeqType = $3; Assigned = $4 }] }
				   | SMALL_NAME IN for_sequence simple_expr COMMA parallel_sequences
				   		{ { Name = $1; SeqType = $3; Assigned = $4 } :: $6 }

fold_inits : SMALL_NAME EQUALS simple_expr
				{ [{ Name = $1; Assigned = $3 }] }
		   | SMALL_NAME EQUALS simple_expr COMMA fold_inits
		   		{ { Name = $1; Assigned = $3; } :: $5 }

function_literal : L_BANANA simple_expr R_BANANA
					{ $2 }
				 | L_BANANA var_only_pattern_list R_BIND simple_expr R_BANANA
				 	{ [EStatementBlock([SLet { Matcher = $2; Body = [] }; SExpression($4)])] }

tag_expression : OF identifier
					{ ETags ([$2], []) }
			   | PER identifier
			   		{ ETags ([], [$2]) }
			   | OF L_BRACE R_BRACE
			   		{ ETags ([], []) }
			   | OF L_BRACE identifier_list R_BRACE
			   		{ ETags ($3, []) }
			   | OF L_BRACE PER identifier_list R_BRACE
			   		{ ETags ([], $4) }
			   | OF L_BRACE identifier_list PER identifier_list R_BRACE
			   		{ ETags ($3, $5) }

lit_expr_list : non_empty_simple_expr						{ [$1] }
			  | lit_expr_list COMMA non_empty_simple_expr	{ List.append $1 [$3] }

tuple_literal : L_BOX R_BOX														{ [ETupleLiteral []] }
			  | L_BOX lit_expr_list R_BOX										{ ETupleLiteral [] :: expandTupleConsSyntax $2 }
			  | L_BOX non_empty_simple_expr ELLIPSIS R_BOX						{ [ETupleLiteral $2] }
			  | L_BOX non_empty_simple_expr ELLIPSIS WITH lit_expr_list R_BOX	{ ETupleLiteral $2 :: expandTupleConsSyntax $5 }

list_literal : L_BRACKET R_BRACKET														{ [EListLiteral []] }
			 | L_BRACKET lit_expr_list R_BRACKET										{ EListLiteral [] :: expandListConsSyntax $2 }
			 | L_BRACKET non_empty_simple_expr ELLIPSIS R_BRACKET						{ [EListLiteral $2] }
			 | L_BRACKET non_empty_simple_expr ELLIPSIS WITH lit_expr_list R_BRACKET	{ EListLiteral $2 :: expandListConsSyntax $5 }

// vector_literal : VECTOR L_BRACKET lit_expr_list R_BRACKET					{ EVectorLiteral ([], $3) }
//			   | VECTOR L_BRACKET non_empty_simple_expr WITH lit_expr_list R_BRACKET	{ EVectorLiteral ($3, $5) }

// TODO: figure out what should be possible as slice parameters
// slice_literal : SLICE L_BRACKET fixed_size_term_expr ELLIPSIS fixed_size_term_expr R_BRACKET	{ ESliceLiteral ($3, $5) }

record_literal : L_PUMPKIN non_empty_simple_expr ELLIPSIS WITH field_list R_PUMPKIN	{ ERecordLiteral ($2) :: expandFieldSyntax $5 }
			   | L_PUMPKIN non_empty_simple_expr ELLIPSIS R_PUMPKIN					{ [ERecordLiteral ($2)] }
			   | L_PUMPKIN field_list R_PUMPKIN										{ ERecordLiteral ([]) :: expandFieldSyntax $2 }
			   | L_PUMPKIN R_PUMPKIN												{ [ERecordLiteral ([])] }

variant_literal : L_CONE field R_CONE	{ EVariantLiteral ($2) }

case_word : CASE L_BRACE case_clause_list BAR ELSE R_BIND simple_expr R_BRACE	{ ECase ($3, $7) }

case_clause_list : case_clause					{ [$1] }
				 | case_clause_list case_clause	{ List.append $1 [$2] }

case_clause : BAR SMALL_NAME R_BIND simple_expr	{ { Tag = $2; Body = $4 } }

field_list : field					{ [$1] }
		   | field COMMA field_list	{ $1 :: $3 }

field : SMALL_NAME EQUALS simple_expr	{ ($1, $3) }

identifier_list : identifier					{ [$1] }
				| identifier_list identifier	{ List.append $1 [$2] }

identifier : qualified_name	{ sIdentifier (List.take (List.length $1 - 1) $1) (List.last $1) }

type_identifier : qualified_ctor { sIdentifier (List.take (List.length $1 - 1) $1) (List.last $1) }

pred_identifier : qualified_pred { sIdentifier (List.take (List.length $1 - 1) $1) (List.last $1) }

qualified_name : SMALL_NAME								{ [$1] }
			   | BIG_NAME								{ [$1] }
			   | OPERATOR_NAME							{ [$1] }
			   | PREDICATE_NAME							{ [$1] }
			   | SMALL_NAME DOUBLE_COLON qualified_name	{ $1 :: $3 }

qualified_ctor : BIG_NAME								{ [$1] }
			   | OPERATOR_NAME							{ [$1] }
			   | SMALL_NAME DOUBLE_COLON qualified_ctor	{ $1 :: $3 }

qualified_pred : PREDICATE_NAME							{ [$1] }
			   | SMALL_NAME DOUBLE_COLON qualified_pred	{ $1 :: $3 }



no_dot_pattern_expr_list : pattern_expr								{ ind $1 SEnd }
						 | no_dot_pattern_expr_list pattern_expr	{ ind $2 $1 }

var_only_pattern_list : 									{ SEnd }
					  | SMALL_NAME var_only_pattern_list	{ ind (PNamed ($1, PWildcard)) $2 }

pattern_expr_list :	pattern_expr					{ ind $1 SEnd }
				  | pattern_expr ELLIPSIS			{ dot $1 SEnd }
				  | pattern_expr_list pattern_expr  { ind $2 $1 }

field_pattern_list : SMALL_NAME EQUALS pattern_expr								{ [($1, $3)] }
				   | SMALL_NAME EQUALS pattern_expr COMMA field_pattern_list	{ ($1, $3) :: $5 }

pattern_expr : TRUE												{ PTrue }
			 | FALSE											{ PFalse }
			 | INTEGER											{ PInteger ($1) }
			 | DECIMAL											{ PDecimal ($1) }
			 | STRING											{ PString ($1) }
			 | CHARACTER										{ PRune ($1) }
			 | UNDERSCORE										{ PWildcard }
			 | REF pattern_expr									{ PRef ($2) }
			 | SMALL_NAME										{ PNamed ($1, PWildcard) }
			 | SMALL_NAME IS pattern_expr 						{ PNamed ($1, $3) }
			 | type_identifier
			 	{ PConstructor ($1, SEnd) }
			 | L_PAREN type_identifier pattern_expr_list R_PAREN
			 	{ PConstructor ($2, $3) }
			 | tuple_pattern									{ $1 }
			 | list_pattern										{ $1 }
			 | vector_pattern									{ $1 }
			 | slice_pattern									{ $1 }
			 | record_pattern									{ $1 }

tuple_pattern : L_BOX pattern_expr_list R_BOX			{ PTuple ($2) }

list_pattern : L_BRACKET pattern_expr_list R_BRACKET			{ PList ($2) }
			 | L_BRACKET R_BRACKET								{ PList (SEnd) }

vector_pattern : VECTOR L_BRACE pattern_expr_list R_BRACE		{ PVector ($3) }

slice_pattern : SLICE L_BRACE pattern_expr_list R_BRACE			{ PSlice ($3) }

record_pattern : L_PUMPKIN field_pattern_list R_PUMPKIN			{ PRecord ($2) }