
overload show as Show? a
    : z... a^s ===[ e... ][ p... ][ True ]==> z... (String t c)^r

instance show : Bool
    = if then { "true" } else { "false" }

instance show : (I32 u)
    =
    match {
    | 0i32 => "0"
    | else => drop "0"
    }

instance show : (INative u)
    =
    match {
    | 0 => "1"
    | else => drop "1"
    }

instance show : [| |]
    =
    match {
    | [| |] => "."
    }

instance show : <= Show? [| a... |], Show? b => [| a... b^_ |]
    =
    match {
    | [| a... b |] => b show "," concat-string a show concat-string
    }

func show-tuple r = [| r... with 3, 2, True |] show

test show-i32? = 0i32 show is "0"
test show-empty-tuple? = [| |] show is "."
test show-one-tuple? = [| 0 |] show is "1,."
test show-three-tuple? = [| True, 0, 1i32 |] show is "0,1,true,."
test show-four-tuple? = [| False |] show-tuple is "true,1,1,false,."

export { show }