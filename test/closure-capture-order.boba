
//test swap-cap? =
//    { let x = 1; let y = True; (| 0 drop x y |) do swap } drop satisfies

effect swapper!
    = swap! : z... a^r b^s ===[ e..., swapper! ][ p... ][ True ]==> z... b^s a^r

//test hdlr-cap? = {
//        let x = True;
//        let y = 0;
//        handle 2 { x y swap! }
//        with {
//            | swap! => swap resume
//        }
//    }
//    satisfies

main = {
    let x = True;
    let y = 0;
    handle 2 { x y swap! }
    with {
        | swap! => swap resume
    }
    drop
}
