overload eq as Eq? a
    : z... a^s a^r ===[ e... ][ p... ][ True ]==> z... Bool^q

instance eq : Bool
    = eq-bool

instance eq : II32
    = eq-i32

instance eq : <= Eq? y => [y^_]
    =
    {
        let l r;
        if l length-list r length-list eq then {
            for el <= list l, er <= list r fold res <= True then {
                el er eq res and-bool
            }
        } else { False }
    }
    

func test-eq-1 = True False eq

func test-eq-2 = True eq

func test-eq-3 = 1 eq

func test-eq-4 w x y z = w x eq y z eq and-bool

// TODO: this is broken currently
//func eq-tuple =
//    for fold res <= true with e1 <= tuple, e2 <= tuple then {
//        e1 e2 eq res and-bool
//    }

main = { 1 test-eq-3; let x; 0 }