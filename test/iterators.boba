
func iter-in-test =
    for el in iterate result res = 0 then {
        res el add-i32
    }

func iter-print =
    for el in [ "!", "World", "Hello, " ] iterate then {
        el print-string
    }

func iter-to-list =
    for el in iterate as list then {
        el
    }

func iter-two-print =
    for el in [ "wolf", "bad", "big" ] iterate, er in list [ "ly", "ish" ] then {
        el er concat-string print-string
    }

func iter-strings =
    for ec in string as list then {
        ec
    }

test iter-in-test? = [3, 2, 1] iter-in-test is 6
test iter-with-below? = 0 [3, 2, 1] iter-in-test drop is 0
test iter-to-list-id? = [ 3, 2, 1 ] iter-to-list is [ 3, 2, 1 ]
test iter-two-prints? = 0 iter-two-print is 0

test for-fold-list? =
    for el in list [ True, False ]
    result res = False then {
        el res or-bool
    }
    satisfies

test for-fold-two? =
    for el in [ True, False ] iterate, er in list [ True, True ]
    result res = True then {
        el er or-bool res and-bool
    }
    satisfies

test for-list-map-list? =
    for el in list [ 3, 2, 1 ] as list then {
        el
    }
    is [ 3, 2, 1 ]

test for-iter-map-list? =
    for el in [ 3, 2, 1 ] iterate as list then {
        el
    }
    is [ 3, 2, 1 ]

// TODO: hangs type inference during CHR solving, likely due to excessive confluence checking
//test for-two-iter-map-list? =
//    for el in [ 3, 2, 1 ] iterate, er in [ 6, 5, 4 ] iterate as list then {
//        el er add-i32
//    }
//    is [ 9, 8, 7, 8, 7, 6, 7, 6, 5 ]

// TODO: code generation is broken for more than one map output
//test for-iter-map-two-list? =
//    for el in [ 3, 2, 1 ] iterate as list, list then {
//        el el
//    }
//    satisfies
//    {
//        let l = [ 3, 2, 1 ] eq;
//        let r = [ 3, 2, 1 ] eq;
//        l r and-bool
//    }

export { iterate }