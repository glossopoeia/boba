
rec data List x
    = Cons :
        {(List {a vd sd}) (vd and vl) (sd or sl)}
        {a v s}
            ;
        {(List {a (v and vd) (s or sd)}) (((v and vl) and vd) and vr) (((s or sl) or sd) or sr)}
    | Nil  : ; {(List {a v s}) (v and vl) (s or sl)}

rec func twice-cons = Cons Cons

rec func list-len l =
    l match {
        (Cons t h) => t list-len inc-i32;
        Nil => 0;
    }

main = Nil 1 Cons 2 Cons list-len